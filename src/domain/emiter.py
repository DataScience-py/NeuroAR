from abc import ABC, abstractmethod
from typing import Any, Callable


class BaseEmitter(ABC):
    def __init__(self) -> None: ...
    @abstractmethod
    def emit(self, event: str, *args: Any, **kwargs: Any) -> None: ...
    @abstractmethod
    def subscribe(self, event: str, handler: Callable[..., Any]) -> None: ...
    @abstractmethod
    def create_event(self, event_name: str) -> None: ...
